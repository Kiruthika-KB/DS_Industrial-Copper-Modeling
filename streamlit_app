import pandas as pd
import numpy as np
import streamlit as st
import pickle
import json

# Load models, scaler, and feature info
regressor = pickle.load(open('D:/guvi/Project/5. copper_industry/reg.pkl', 'rb'))
classifier = pickle.load(open('D:/guvi/Project/5. copper_industry/classifier.pkl', 'rb'))
scaler = pickle.load(open('D:/guvi/Project/5. copper_industry/scaler.pkl', 'rb'))
with open('D:/guvi/Project/5. copper_industry/selected_features.json', 'r') as f:
    selected_features = json.load(f)

st.title("Industrial Copper Modeling")

# Input validation function
def validate_and_scale_input(input_text, expected_features, scaler):
    try:
        features = [float(i) for i in input_text.split(',')]
        if len(features) != len(expected_features):
            raise ValueError(f"Expected {len(expected_features)} features, but got {len(features)}.")
        
        # Create a DataFrame to match feature names
        input_df = pd.DataFrame([features], columns=expected_features)
        
        # Scale the input
        scaled_input = scaler.transform(input_df)
        return scaled_input
    except ValueError as e:
        st.error(f"Invalid input: {e}")
        return None

# Regression Prediction
st.subheader("Selling Price Prediction")
regression_input = st.text_input("Enter regression feature values separated by commas (e.g., 1.0, 2.0, 3.0):", key="regression_input")
if st.button("Predict Selling Price"):
    input_features = validate_and_scale_input(regression_input, selected_features, scaler)
    if input_features is not None:
        prediction = regressor.predict(input_features)
        st.write("Predicted Selling Price:", np.expm1(prediction[0]))

# Classification Prediction
st.subheader("Lead Status Prediction")
classification_input = st.text_input("Enter classification feature values separated by commas (e.g., 4.0, 5.0, 6.0):", key="classification_input")
if st.button("Predict Lead Status"):
    input_features = validate_and_scale_input(classification_input, selected_features, scaler)
    if input_features is not None:
        prediction = classifier.predict(input_features)
        status = "WON" if prediction[0] == 1 else "LOST"
        st.write("Lead Status Prediction:", status)
